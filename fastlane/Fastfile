# https://github.com/KrauseFx/fastlane/tree/master/docs

ENV["LANG"]="en_US.UTF-8"

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.57.0"

before_all do |lane|
end

lane :prebuild do
  
  install_cocoapods_if_needed

  # if you're not me, you need to inject your own GitHub etc app API keys.
  # but don't worry, those are only needed if you'll be using OAuth to authenticate
  # with services, not if you're using e.g. personal token from GitHub.
  # you can register your own app at https://github.com/settings/applications/new

  # if this is running on CI, just inject dummy keys - they're not used in tests at all.
  if ENV["XCS"] == "1"
    puts "Running on XCS, injecting dummy credentials"
    inject_dummy_credentials
    puts "Done injecting dummy credentials"
  end

  cocoapods
end

lane :install_cocoapods_if_needed do
  ['cocoapods', 'cocoapods-keys'].each do |g|
    begin
      sh "test $(gem list -i #{g}) == false && gem install #{g}"
    rescue Exception
    end
  end
end

private_lane :inject_dummy_credentials do
    # inspired by https://github.com/artsy/eidolon/blob/master/fastlane/Fastfile
    keys = [
      'GitHubAPIClientId', 
      'GitHubAPIClientSecret',
      'BitBucketAPIClientId',
      'BitBucketAPIClientSecret'
    ]
    commands = keys.map { |key|
      begin
        sh "pod keys rm #{key} Buildasaur"
        sh "pod keys rm #{key} Buildasaur.xcodeproj"
      rescue Exception
      end

      "pod keys set #{key} 'INSERT_YOUR_OWN_KEY_HERE' Buildasaur"
    }.join(' ; ')
    sh "cd .. ; #{commands}"
end

lane :test do
  run_tests
end

private_lane :run_tests do
  prebuild
  xcodebuild(
    test: true,
    scheme: 'Buildasaur',
    workspace: 'Buildasaur.xcworkspace'
    )
end

lane :release do
  run_tests
  build
  release_no_build
end

lane :release_app do
  raise "No built app found in ./build/Buildasaur.app" unless File.exist?("../build/Buildasaur.app")
  human_version = get_info_plist_value(
    key: "CFBundleShortVersionString",
    path: "Buildasaur/Info.plist"
  )
  machine_version = get_info_plist_value(
    key: "CFBundleShortVersionString",
    path: "Buildasaur/Info.plist"
  )
  # TODO: add validation that the version was really up'ed
  github(
    assets: ["./build/Buildasaur.app"],
    version: human_version
    )
  # TODO: add sparkle lane call
end

lane :build do
  # TODO: fix for Developer-ID signing & exporting & crashlytics dSYM sending
  gym(
    scheme: 'Buildasaur',
    output_name: 'Buildasaur',
    output_directory: './build'
    )
end

lane :sparkle do |params|

  # TODO: pass the actual path if different
  app_zip_path = "../build/Buildasaur.app.zip"

  release_info = create_sparkle_release_notes

  sparkle_add_update(
      feed_file: "sparkle.xml",
      app_download_url: "https://github.com/czechboy0/Buildasaur/releases/download/v0.8.0/Buildasaur.app.zip",
      app_size: "#{File.size(app_zip_path)}",
      machine_version: "40",
      human_version: "1.0-beta1",
      title: release_info[:title],
      release_notes_link: release_info[:release_notes_link],
      deployment_target: "10.11"
    )
end

private_lane :create_sparkle_release_notes do |params|
  # Download the markdown release title and release notes from GitHub, render them into HTML and save that HTML to a separate file
  # TODO

    # release_notes_html = render_github_markdown(
  #     context_repository: "czechboy0/Buildasaur",
  #     api_token: ENV["GITHUB_TOKEN"],
  #     markdown_file: "test.md"
  #   )

  # puts release_notes_html

  # return a hash of 1) title, 2) release notes HTML link
  {
    title: "New Version v1.0-beta1!",
    release_notes_link: "https://github.com/czechboy0/Buildasaur/releases/tag/v0.8.0"
  }
end

private_lane :github do |params|

  assets = params[:assets]
  version = params[:version]
  version_tag = "v#{version}"

  # prep the local state
  ensure_git_status_clean
  ensure_git_branch(branch: "master")
  git_pull

  # regen the changelog and open it
  sh "cd .. && github_changelog_generator -t $GITHUB_TOKEN && subl CHANGELOG.md"

  # ask for the version
  title = prompt(text: 'Release Title: ')
  description = prompt(text: "Release changelog: ",
   multi_line_end_keyword: "END")

  # create a new release on GitHub
  repo_url = "czechboy0/Buildasaur"
  ENV["FL_GITHUB_RELEASE_API_TOKEN"] = ENV["GITHUB_TOKEN"]
  release = set_github_release(
    repository_name: repo_url,
    upload_assets: assets,
    name: [version_tag, title].join(" - "),
    tag_name: version_tag,
    description: description,
    is_draft: false,
    is_prerelease: false
  )

  # sh "cd .. && rm -rf build" #delete built ipa/app

  # regenerate changelog to get it committed
  # sh "cd .. && github_changelog_generator -t $GITHUB_TOKEN"
  # sh "cd .. && git commit -am \"changelog\" && git push"

  # notify us on slack
  # slack(
  #   slack_url: ENV['SLACK_RELEASES_URL'],
  #   message: "Successfully released [Buildasaur #{version_tag}](#{release['html_url']}) :rocket:",
  #   payload: {
  #     "New" => release['body']
  #   }
  # )

end

